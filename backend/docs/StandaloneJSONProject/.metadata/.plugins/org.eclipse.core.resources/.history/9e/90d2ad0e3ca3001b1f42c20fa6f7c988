package com.readexcel.demo;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.odftoolkit.odfdom.doc.OdfDocument;
import org.springframework.stereotype.Service;

import com.readexcel.demo.entity.RequestInfo;


@Service
public class JsonApiCon {
	

	public List<PwcCustomer> readXLSXFile() throws Exception
	    {
			List<PwcCustomer> plist =new ArrayList();
			List<RequestInfo> req = new ArrayList<RequestInfo>();
			try {
		        FileInputStream file = new FileInputStream(new File("F:/StandaloneJSONProject/demo/jsonxsl.xlsx"));
		        XSSFWorkbook  wb = new XSSFWorkbook(file);   
		        XSSFSheet sheet = wb.getSheetAt(0);
		     
		        Iterator<Row> rowIterator = sheet.iterator();
		        int j=0;
	            while (rowIterator.hasNext()) 
	            {
	            	j++;
	            	if(j==1) {
	            		rowIterator.next();
	            	}
	                Row row = rowIterator.next();
	                //For each row, iterate through all the columns
	                Iterator<Cell> cellIterator = row.cellIterator();
	                int i=0;
	                Object cellvalue = null;
	               
	                RequestInfo r= new RequestInfo();
	                while (cellIterator.hasNext()) 
	                {
	                	i++;
	                	
	                    Cell cell = cellIterator.next();
	                  
	                    
	                    switch (cell.getCellType()) 
	                    {
	                        case Cell.CELL_TYPE_NUMERIC:
	                        
	                            cellvalue=cell.getNumericCellValue();
	                            break;
	                        case Cell.CELL_TYPE_STRING:
	                        
	                            cellvalue=cell.getStringCellValue();
	                            break;
	                         
	                    }
	                    
						
						/*
						 * if(i==1) { p.setId(cellvalue.toString()); } if(i==2) {
						 * p.setName(cellvalue.toString()); } if(i==3) {
						 * p.setAddress(cellvalue.toString()); } if(i==4) {
						 * p.setAge(cellvalue.toString()); }
						 * 
						 */
	                    
	                    System.out.println(i+" "+cellvalue);
	                }
	               // plist.add(p);
	              //  System.out.println("");
	            }
	            file.close();
			}catch(Exception ex) {
				ex.printStackTrace();
			}
			
			// plist.remove(0);
			return plist;
	    }
	
	
	
	
	public List<RequestInfo> readXLSXFile2() throws Exception
    {
		List<RequestInfo> reqList = new ArrayList<RequestInfo>();
		try {
			
		   
	        FileInputStream file = new FileInputStream(new File("F:/StandaloneJSONProject/demo/jsonxsl.xlsx"));
	     
	        XSSFWorkbook  wb = new XSSFWorkbook(file);   
	        System.out.println(wb.getNumberOfSheets());
	        XSSFSheet sheet = wb.getSheetAt(0);
	    
	        Iterator<Row> rowIterator = sheet.iterator();
	        
	        int j=0;
            while (rowIterator.hasNext()) 
            {
            	j++;
            	if(j==1) {
            		rowIterator.next();
            	}
                Row row = rowIterator.next();
                
              
                Iterator<Cell> cellIterator = row.cellIterator();
               
                int i=0;
                Object cellvalue = null;
                RequestInfo r= new RequestInfo();
               
                while (cellIterator.hasNext()) 
                {
                		
                    Cell cell = cellIterator.next();
                    
                    
                    switch (cell.getCellType()) 
                    {
                        case Cell.CELL_TYPE_NUMERIC:
                        
                            cellvalue=cell.getNumericCellValue();
                            break;
                        case Cell.CELL_TYPE_STRING:
                            cellvalue=cell.getStringCellValue();
                            break;
						/*
						 * case Cell.CELL_TYPE_BLANK: cellvalue=null; break;
						 */
                        	
                    }
                    
                    i++;
                    if(cellvalue!=null) {
                    	if(cellvalue.toString()=="null" || cellvalue.toString().isBlank() ||cellvalue.toString().isEmpty())
                    	cellvalue=null;
                    }
					
                    switch (i){
                    
                    	
                    case 1:{
                    	r.setApiId(getString(cellvalue));
                    	break;
                    }
                    case 2:{
                    	r.setVer(getString(cellvalue));
                    	break;
                    }
                    
                    case 3:{
                    	r.setAction(getString(cellvalue));
                    	break;
                    }
                    
                    case 4:{
                    	r.setDid(getString(cellvalue));
                    	break;
                    }
                    case 5:{
                    	r.setKey(getString(cellvalue));
                    	break;
                    }
                    
                    case 6:{
                    	r.setMsgId(getString(cellvalue));
                    	break;
                    }
                    case 7:{
                    	r.setRequesterId(getString(cellvalue));
                    	break;
                    }
                    
                    case 8:{
                    	r.setAuthToken(getString(cellvalue));
                    	break;
                    }
                    
                  }//Switch
					
                    System.out.println(cell.getRowIndex()+i+" "+cellvalue);
                   
                }
                reqList.add(r);
              //  System.out.println("");
                
            }
            file.close();
		}catch(Exception ex) {
			ex.printStackTrace();
		}
		
		// plist.remove(0);
		return reqList;
    }
	
	
	
	public String getString(Object o) {
		return o.toString();
	}
	
	public Integer getInteger(Object o) {
		return Integer.parseInt(o.toString());
	}
}
